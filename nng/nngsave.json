{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "isSolved": true,
      "editorText": "refl,\r\n"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "isSolved": true,
      "editorText": "rw h,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "rw ← h,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "isSolved": true,
      "editorText": "rw add_succ,\r\nrw add_zero,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with d hd,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw hd,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with x hd,\r\nrw add_zero,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw add_succ,\r\nrw add_succ,\r\nrw hd,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with x hd,\r\nrw add_zero,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw hd,\r\nrw ← add_succ,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction b with x hd,\r\nrw  add_zero,\r\nrw zero_add,\r\nrefl,\r\nrw add_succ,\r\nrw hd,\r\nrw succ_add,refl,"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw add_succ,\r\nrw add_zero,\r\nrefl,"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "rw add_assoc,\r\nrw add_assoc,\r\nrw add_comm b c,\r\nrefl,"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with x hd,\r\nrw mul_zero, refl,\r\nrw mul_succ,\r\nrw hd,relf,"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "induction m with x hd,\r\nrw zero_mul, refl,\r\nrw one_eq_succ_zero,\r\nrw mul_succ,\r\nrw mul_zero,\r\nrw zero_add, refl,"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "induction m with x hd,rw mul_zero,refl,\r\nrw one_eq_succ_zero,rw mul_succ,\r\nrw succ_eq_add_one, rw zero_add,\r\nrw hd, rw ← succ_eq_add_one,refl,"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction a with x hd,\r\nrw zero_add, rw mul_zero,rw zero_add,refl,\r\nrw mul_succ, rw succ_add,rw mul_succ,\r\nrw hd,rw add_right_comm,refl,"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with x hd, rw mul_zero, rw mul_zero,rw mul_zero,refl,\r\nrw mul_succ,rw mul_succ,rw mul_add,rw ← hd,refl,"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "induction b with x hd,rw mul_zero,rw mul_zero,refl,\r\nrw succ_eq_add_one x,rw mul_add,rw mul_add,rw mul_one, rw mul_one,rw add_assoc,rw add_comm a (x+1),rw hd,rw succ_eq_add_one,simp,"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "induction t with x hd, rw mul_zero,rw mul_zero,refl,\r\nrw mul_succ a x,rw mul_succ b x, rw ← add_assoc, rw mul_succ,rw hd,simp,"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction b with x hd, rw mul_zero, rw zero_mul,refl,rw mul_succ,rw succ_mul,rw hd,refl,"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with x hd,rw mul_zero,rw mul_zero,refl,\r\nrw ← mul_assoc,rw ← mul_assoc,rw mul_comm a b,refl,"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "rw pow_zero,refl,"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "rw pow_succ,rw mul_zero,refl,"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,rw pow_succ,rw pow_zero,rw one_mul,refl,"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with x hd,rw pow_zero,refl,\r\nrw pow_succ,rw hd,refl,"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with x hd,rw add_zero,rw pow_zero,rw mul_one,refl,\r\nrw pow_succ,rw ← mul_assoc,rw add_succ,rw pow_succ,rw hd,refl,"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with x hd,rw pow_zero,rw pow_zero,rw pow_zero,refl,\r\nrw succ_eq_add_one,rw pow_add,rw pow_add,rw hd,rw pow_one,rw pow_one,rw pow_add,rw pow_one,simp,"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction m with x hd,rw pow_zero,rw zero_mul,rw pow_zero,rw one_pow,refl,\r\nrw succ_eq_add_one,rw pow_add,rw pow_one,rw add_mul,rw one_mul,rw pow_add,rw mul_pow,rw hd,refl,"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rw two_eq_succ_one,rw one_eq_succ_zero, rw pow_succ,rw pow_succ,rw pow_succ,rw pow_succ,rw pow_zero,rw pow_zero,rw one_mul,\r\nrw one_mul,rw pow_succ,rw pow_succ,rw pow_zero,rw one_mul,rw add_mul,rw mul_add,rw mul_add,rw succ_mul,rw succ_mul,rw zero_mul,rw zero_add,rw add_mul,simp,"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro n,exact 3*n+2,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),have t := j(q),have u : U := l(t),exact u,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),have t := j(q),have u : U := l(t),exact u,"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,intro q,exact p,"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros f h p,apply (f p),apply (h p),"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intros h k s,apply k,apply h,exact s,"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intros f h p,apply h,apply f,exact p,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,apply f15,apply f11,apply f9,apply f8,apply f5,apply f2,apply f1,exact a,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro p,exact p,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),have t : T := j(q),have u : U := l(t),exact u,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),have t : T := j(q),have u : U := l(t),exact u,"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,intro q, exact p,"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros f h p, have j : Q → R := f p,apply j, have t : Q := h p,exact t,"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros f h p,have q : Q := f p,exact h(q),"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "repeat {rw not_iff_imp_false},intros f h p,have q : Q := f p,exact h(q),"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "cc,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "split,exact p,exact q,"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro h,cases h with p q,split,exact q,exact p,"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intros h k,split,cases h with p q,exact p,cases k with q r,exact r,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intros h,cases h with hpq hqp,intro x,cases x with hqr hrq,split,intro p,have q := hpq(p),have r := hqr(q),exact r,intro  r,have q := hrq(r),have p := hqp(q),exact p,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intros h,cases h with hpq hqp,intro x,cases x with hqr hrq,split,intro p,have q := hpq(p),have r := hqr(q),exact r,intro  r,have q := hrq(r),have p := hqp(q),exact p,"
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro q,right,exact q,"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro pq,cases pq with p q,right,exact p,left,exact q,"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "split,intro h,cases h with p qr,cases qr with q r,left,split,exact p,exact q,right,split,exact p,exact r,intro h,cases h with pq pr,split,cases pq with p q,exact p,cases pq with p q,left,exact q,cases pr with p r,split,exact p,right,exact r,"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "intro pp,cases pp with p pp,exfalso,apply pp,exact p,"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "by_cases p : P; by_cases q:Q,repeat {cc},"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": "apply succ_inj,exact hs,"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "apply succ_inj,apply succ_inj,exact h,"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro ab,rw ab,refl,"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split, exact succ_inj,exact succ_eq_succ_of_eq,"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,induction t with x hd,rw add_zero at h,rw add_zero at h,exact h,rw add_succ at h,rw add_succ at h,rw succ_eq_succ_iff at h,apply hd,exact h,"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,rw add_comm t b at h,rw add_comm t a at h,induction t with x hd,rw add_zero at h,rw add_zero at h,exact h,rw add_succ at h,rw add_succ at h,rw succ_eq_succ_iff at h,apply hd,exact h,"
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,exact add_right_cancel a t b,intro ab,rw ab,refl,"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,induction a with x hd,rw zero_add at h,exact h,rw succ_add at h, have ab := succ_inj(h),have b := hd(ab),exact b,"
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "isSolved": true,
      "editorText": "symmetry,exact zero_ne_succ a,"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with d,refl,rw add_succ at H,exfalso,apply succ_ne_zero(a+d),exact H,"
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "isSolved": true,
      "editorText": "intro ab,cases a with d,refl,exfalso,rw succ_add at ab,apply succ_ne_zero(d+b),exact ab,"
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "isSolved": true,
      "editorText": "rw ← succ_eq_add_one d,refl,"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "isSolved": true,
      "editorText": "intro h,rw succ_eq_add_one at h,rw one_eq_succ_zero at h,symmetry at h,have p := eq_zero_of_add_right_eq_self(h),apply succ_ne_zero 0,exact p,"
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with n,intros h k,apply k,cases a with g,intros h k l,apply h,refl,\r\nintros h k l,rw mul_succ at l,rw succ_mul at l,rw add_succ at l,exact succ_ne_zero _ l,"
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with x,right,refl,cases a with y,left,refl,rw mul_succ at h,rw add_succ at h,exfalso,exact succ_ne_zero _ h,"
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "split,intro h,apply eq_zero_or_eq_zero_of_mul_eq_zero,exact h,intro h,cases b with y,rw mul_zero,refl,cases h with ha hb,rw ha,rw zero_mul,refl,rw hb,rw mul_zero,refl,"
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "isSolved": true,
      "editorText": "induction c with x hd generalizing b,intro h,rw mul_zero at h,have hp := eq_zero_or_eq_zero_of_mul_eq_zero a b h,cases hp with x y,exfalso,apply ha,exact x,exact y,intro g,induction b with b ht,rw mul_zero at g,symmetry,symmetry at g,have j:= eq_zero_or_eq_zero_of_mul_eq_zero a (succ x) g,cases j with hj hk,exfalso,apply ha,exact hj,exact hk,rw mul_succ at g,rw mul_succ at g,have p := add_right_cancel (a * b) a (a * x) g,have s := hd b p,rw s,refl,"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "isSolved": true,
      "editorText": "use 1,exact add_comm 1 x,"
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "isSolved": true,
      "editorText": "use 0,refl,"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "isSolved": true,
      "editorText": "intro h,cases h with c hc,use c+1,rw hc,rw succ_eq_add_one,refl,"
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "isSolved": true,
      "editorText": "use a,rw zero_add,refl,"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "isSolved": true,
      "editorText": "cases hab with y hy,cases hbc with x hx,rw hy at hx,use y + x,rw ← add_assoc,exact hx,"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "isSolved": true,
      "editorText": "cases hab with x hx,cases hba with y hy,rw hx at hy,symmetry at hy hx,rw add_assoc at hy,have h := eq_zero_of_add_right_eq_self hy,have j := add_right_eq_zero h,rw j at hx,rw add_zero at hx,exact hx,"
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "isSolved": true,
      "editorText": "cases h with c hc,symmetry at hc,have j := add_right_eq_zero hc,exact j,"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "isSolved": true,
      "editorText": "cases h with c hc,use c,rw hc,rw succ_add,refl,"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "isSolved": true,
      "editorText": "revert a,induction b with x hd,intro a,right,exact zero_le a,intro a,induction a with y hg,left,exact zero_le (succ x),have j:= hd y,cases j with xy yx,left,apply succ_le_succ,exact xy,right,apply succ_le_succ,exact yx,"
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "isSolved": true,
      "editorText": "induction a with x hx,exact zero_le (succ 0),use 1,rw succ_eq_add_one,refl,"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "isSolved": true,
      "editorText": "intro ab,intro t,cases ab with c hc,rw hc,use c,simp,"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro h,cases h with c hc,rw succ_eq_add_one at hc,rw succ_eq_add_one at hc,rw add_comm a 1 at hc,rw add_comm b 1 at hc,rw add_assoc at hc,have h := add_left_cancel 1 b (a+c) hc,use c,rw h,refl,"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro h,cases h with c hc,cases c,rw add_zero at hc,apply ne_succ_self a,exact hc,rw succ_eq_add_one at hc,rw add_assoc at hc,rw add_succ at hc,symmetry at hc,have j:= eq_zero_of_add_right_eq_self hc,apply succ_ne_zero (1+c),exact j,"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "isSolved": true,
      "editorText": "rw add_comm t a,rw add_comm t b,have g := add_le_add_right h,apply g,"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro h,cases h with ab ba,cases ab with c hc,cases c,rw add_zero at hc,exfalso,apply ba,rw hc,exact le_refl a,use c,rw hc,rw add_succ,rw succ_add,refl,"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro h,split,cases h with c hc,rw succ_eq_add_one at hc,use 1+c,rw ← add_assoc,exact hc,intro ba,cases ba with c hc,cases h with k hk,cases c,rw add_zero at hc,rw hc at hk,apply not_succ_le_self b,use k,exact hk,rw hk at hc,rw add_assoc at hc,rw add_succ at hc,apply not_succ_le_self a,use succ(k+c),exact hc,"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "split,intro h,have j := lt_aux_one a b h,exact j,intro k,apply lt_aux_two,exact k,"
    }
  ]
}